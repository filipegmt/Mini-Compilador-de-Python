lexer grammar PythonLexer;

DEF      : 'def' ;
CLASS    : 'class' ;
IF       : 'if' ;
ELSE     : 'else' ;
ELIF     : 'elif' ;
FOR      : 'for' ;
WHILE    : 'while' ;
RETURN   : 'return' ;
TRUE     : 'True' ;
FALSE    : 'False' ;
NONE     : 'None' ;
AND      : 'and' ;
OR       : 'or' ;
NOT      : 'not' ;
IN       : 'in' ;
IS       : 'is' ;
LAMBDA   : 'lambda' ;
TRY      : 'try' ;
EXCEPT   : 'except' ;
FINALLY  : 'finally' ;
RAISE    : 'raise' ;
WITH     : 'with' ;
IMPORT   : 'import' ;
FROM     : 'from' ;
AS       : 'as' ;
GLOBAL   : 'global' ;
NONLOCAL : 'nonlocal' ;

LPAREN   : '(' ;
RPAREN   : ')' ;
LBRACE   : '{' ;
RBRACE   : '}' ;
LSQUARE  : '[' ;
RSQUARE  : ']' ;
COMMA    : ',' ;
COLON    : ':' ;
DOT      : '.' ;
ASSIGN   : '=' ;
ADD      : '+' ;
SUB      : '-' ;
MUL      : '*' ;
DIV      : '/' ;
MOD      : '%' ;
POW      : '**' ;
AND_OP   : '&' ;
OR_OP    : '|' ;
XOR_OP   : '^' ;
NOT_OP   : '~' ;
LT       : '<' ;
GT       : '>' ;
LTE      : '<=' ;
GTE      : '>=' ;
EQ       : '==' ;
NEQ      : '!=' ;
AT       : '@' ;
BACKSLASH : '\\' ;
NEWLINE  : '\r'? '\n' ;
INDENT   : '    ' ;  

STRING   : '"' ('\\' . | ~["\\])* '"' | '\'' ('\\' . | ~['\\])* '\'' ;
NUMBER   : [0-9]+ ('.' [0-9]+)? ;
ID       : [a-zA-Z_][a-zA-Z_0-9]* ;

WS       : [\r\f]+ -> skip; 
LINE_COMMENT : '#' ~[\r\n]* -> skip; 
BLOCK_COMMENT : '"""' .*? '"""' -> skip; 
